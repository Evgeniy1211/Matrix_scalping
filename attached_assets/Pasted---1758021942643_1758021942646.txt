–û—Ç–ª–∏—á–Ω–æ üí° –ø–æ–Ω—è–ª —Ç–µ–±—è: —Ç–µ–±–µ –Ω—É–∂–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π, ¬´—Ä–∞–∑–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ –ø–æ–ª–æ—á–∫–∞–º¬ª –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∫–∞–ª—å–ø–µ—Ä–∞ –Ω–∞ Random Forest, –≥–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–æ:

–∫–∞–∫–∏–µ –±–ª–æ–∫–∏ –µ—Å—Ç—å,

–∫–∞–∫–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è,

–∑–∞—á–µ–º –∫–∞–∂–¥–∞—è –Ω—É–∂–Ω–∞,

–∫–∞–∫ –æ–Ω–∏ —Å–≤—è–∑–∞–Ω—ã,

–∫–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –≤—ã—Ö–æ–¥–µ.


–≠—Ç–æ –±—É–¥–µ—Ç –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Lego, —á—Ç–æ–±—ã —Ç—ã –ø–æ—Ç–æ–º –ø–µ—Ä–µ–¥–∞–ª –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –≤ Replit.


---

üèóÔ∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: Random Forest Scalper (–ø–æ –ß–∞–Ω—É, 2015‚Äì2017)

üéØ –¶–µ–ª—å

–ü—Ä–æ—Å—Ç–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –º–∞—à–∏–Ω–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞.
–ó–∞–¥–∞—á–∞: –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å, –≤—ã—Ä–∞—Å—Ç–µ—Ç –∏–ª–∏ —É–ø–∞–¥—ë—Ç —Ü–µ–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç–µ, –∏ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ: BUY –∏–ª–∏ SELL.


---

üß© –ë–ª–æ–∫–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞

1. –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö

Binance API —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É ccxt

–§—É–Ω–∫—Ü–∏—è fetch_ohlcv(symbol, timeframe, limit)

–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏: OHLCV (Open, High, Low, Close, Volume).


–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:

–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫,

—Ç–∞–π–º—Ñ—Ä–µ–π–º 1 –º–∏–Ω—É—Ç–∞ (–¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞).




---

2. –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏

pandas ‚Äî —Ä–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä—è–¥–∞–º–∏, –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞–º–∏.

numpy ‚Äî –±—ã—Å—Ç—Ä—ã–µ –º–∞—Ç. –æ–ø–µ—Ä–∞—Ü–∏–∏, —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.

scikit-learn ‚Äî –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ ML: RandomForestClassifier.

matplotlib ‚Äî –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Ü–µ–Ω—ã.

ccxt ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance (–∏ –¥—Ä—É–≥–∏–º –±–∏—Ä–∂–∞–º).



---

3. Feature Engineering (—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)

–§–∏—á–∏ ‚Äî ¬´–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã¬ª, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ—Ä–º–∏–º –º–æ–¥–µ–ª–∏.

–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:

return ‚Äî –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (pct_change).

volatility ‚Äî —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π).

sma5 ‚Äî —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ 5 —Å–≤–µ—á–µ–π.

sma20 ‚Äî —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ 20 —Å–≤–µ—á–µ–π.

sma_diff ‚Äî —Ä–∞–∑–Ω–∏—Ü–∞ sma5 - sma20.



---

4. Target (—Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)

target = 1, –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π.

target = 0, –µ—Å–ª–∏ –∑–∞–∫—Ä—ã–ª–∞—Å—å –Ω–∏–∂–µ.

–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é shift(-1) ‚Äî —Å–º–µ—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 1 —à–∞–≥ –≤–ø–µ—Ä—ë–¥.



---

5. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏

–ê–ª–≥–æ—Ä–∏—Ç–º: RandomForestClassifier (n_estimators=100).

–î–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: train_test_split(test_size=0.2, shuffle=False).

–û–±—É—á–∞–µ–º –Ω–∞ X_train, y_train.



---

6. –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞

–ú–µ—Ç—Ä–∏–∫–∏: classification_report (precision, recall, f1-score).

–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ X_test, y_test.



---

7. –°–∏–≥–Ω–∞–ª—ã –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã: y_pred = model.predict(X_test).

–î–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ DataFrame –∫–∞–∫ –∫–æ–ª–æ–Ω–∫—É signal.

–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã + —Ç–æ—á–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (BUY/SELL).



---

‚öôÔ∏è –ü–æ–ª–Ω—ã–π –∫–æ–¥

import ccxt
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import matplotlib.pyplot as plt

# === 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Binance ===
exchange = ccxt.binance()
symbol = 'BTC/USDT'
timeframe = '1m'
limit = 1000  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π

ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)

df = pd.DataFrame(ohlcv, columns=['timestamp','open','high','low','close','volume'])
df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
df.set_index('timestamp', inplace=True)

# === 2. Feature engineering ===
df['return'] = df['close'].pct_change()
df['volatility'] = df['return'].rolling(5).std()
df['sma5'] = df['close'].rolling(5).mean()
df['sma20'] = df['close'].rolling(20).mean()
df['sma_diff'] = df['sma5'] - df['sma20']

# === 3. Target ===
df['target'] = (df['close'].shift(-1) > df['close']).astype(int)

df = df.dropna()

X = df[['return','volatility','sma5','sma20','sma_diff']]
y = df['target']

# === 4. Train-test split ===
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, shuffle=False
)

# === 5. –û–±—É—á–µ–Ω–∏–µ ===
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# === 6. –û—Ü–µ–Ω–∫–∞ ===
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

# === 7. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ ===
df['signal'] = np.nan
df.loc[X_test.index, 'signal'] = y_pred

plt.figure(figsize=(12,6))
plt.plot(df['close'], label='Close Price')
plt.scatter(df.index, df['close'], c=df['signal'], cmap='coolwarm', label='Signal', alpha=0.7)
plt.legend()
plt.show()


---

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç

–ù–∞ –≤—ã—Ö–æ–¥–µ:

–º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (precision, recall, f1).

–≥—Ä–∞—Ñ–∏–∫: —Ü–µ–Ω–∞ + —Ç–æ—á–∫–∏, –≥–¥–µ –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç BUY/SELL.




---

‚úÖ –ü–ª—é—Å—ã

–ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è.

–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–ë—ã—Å—Ç—Ä–æ –æ–±—É—á–∞–µ—Ç—Å—è.

–•–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ ¬´–ø–µ—Ä–≤–∞—è —Å—Ç—É–ø–µ–Ω—å¬ª –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞.


‚ùå –ú–∏–Ω—É—Å—ã

–ù—É–∂–Ω—ã —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

–¢—Ä–µ–±—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è.

–ù–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –≥–ª—É–±–∏–Ω—É —Ä—ã–Ω–∫–∞ –∏ –≤–Ω–µ–∑–∞–ø–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.



---

‚ö° –í–æ—Ç —ç—Ç–æ –∏ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π Lego-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: –±–ª–æ–∫–∏, –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, —Å–≤—è–∑–∫–∏, –∫–æ–¥.

–•–æ—á–µ—à—å, —è —É–ø–∞–∫—É—é –≤—Å—ë —ç—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç matrixData.ts –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∫–µ–π—Å?

